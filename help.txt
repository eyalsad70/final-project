
in order to run this package you need the following access-keys / tokens

#####  Local deployment on windows desktop:
in windows powershell you should do the following to set those keys as environmant variables:

1. create a file env_set.ps1 with the following content:

$env:TELEGRAM_BOT_TOKEN="your telebot token"
$env:TELEGRAM_BOT_CHANNEL=
$env:GOOGLE_PLACES_KEY="your google places key"
$env:HEREMAPS_ATTRACTIONS_KEY=""
$env:KAFKA_BROKER_HOST = "set its IP. can be localhost"
$env:KAFKA_BROKER_PORT = "9092"
$env:RDS_DB_HOST = "endpoint url"
$env:RDS_DB_NAME = ""
$env:RDS_DB_USER = "postgres"
$env:RDS_DB_PASSWORD = "your password"
$env:RDS_DB_PORT = "5432"
$env:PYTHONPATH="your project root folder"
$env:MONGO_DB_HOST = "set its IP. can be localhost"  
$env:MONGO_DB_PORT = 27017            # Default MongoDB port
$env:MONGO_DB_DBNAME = "nayaProj"     # Change if needed
$env:SENDGRID_MAIL_KEY = "your sendgrid key (if you want it for email responses)"
$env:JAVA_HOME = "jdk folder (optional and needed only if your .venv override global environment settings )"


2. run the following on PS terminal to get temporary admin rights to run the env file -> 
    Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass

3. run ps1 file (wherever you saved it) on PS terminal
    ./env_set.ps1

now you can start project 'main'



# Docker file - Bot is currently using SQL-Lite due to connectivity issues with MS SQL server. 
1. build docker image using the DockerFile
    $ docker build -f DockerFile -t my_travel_app_image .
2. run the docker as follows:
create '.env' file with all the token\key definitions and run:
docker run --env-file ../docker_env my_travel_app_image

to remove running containers use -> docker rm $(docker ps -a -q)
